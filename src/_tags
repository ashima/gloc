<io_util.*>: syntax(camlp4o), package(lwt), package(lwt.syntax)
<url.*>: package(uri), package(lwt)
<world.*>: syntax(camlp4o), package(lwt.syntax), package(uri), package(atdgen)

<pp.*>: package(re.str)
<esslpp_lex.*>: syntax(camlp4o), package(ulex)
<gloc.*>: syntax(camlp4o), package(atdgen), package(lwt), package(lwt.syntax), package(uri)
<gloc_posix.*>: syntax(camlp4o), package(ulex), package(atdgen), package(menhirLib), package(re.str), package(lwt.syntax), package(lwt.unix), package(uri), package(cohttpd), package(semver)
<platform_posix.*>: syntax(camlp4o), package(lwt), package(lwt.unix), package(lwt.syntax), package(cohttpd)
<gloc_js.*>: syntax(camlp4o), package(ulex), package(atdgen), package(menhirLib), package(re.str), package(js_of_ocaml), package(js_of_ocaml.syntax), package(lwt.syntax), package(uri)
<platform_js.*>: syntax(camlp4o), package(uri), package(js_of_ocaml), package(js_of_ocaml.syntax)
<options.*>: package(semver), package(uri)
<cli.*>: package(semver), package(uri)

<gloc_xml.*>: package(atdgen), package(ulex), package(menhirLib), package(re.str), package(lwt)
<gloc_lib.*>: package(atdgen), package(re.str)
<glol.*>: syntax(camlp4o), package(atdgen), package(re.str), package(lwt), package(lwt.syntax)
<glol_js.*>: syntax(camlp4o), package(js_of_ocaml), package(js_of_ocaml.syntax), package(re.str), package(atdgen), package(ulex), package(menhirLib), package(lwt.syntax), package(uri)

<glol_*>: package(atdgen)
<glo_*>: package(atdgen)
<glo_xml.*>: package(re.str)
<glo.*>: package(atdgen), package(re.str)

<glo_lib.*>: package(re.str), package(ulex), package(menhirLib)
<ce_lib.*>: package(menhirLib)
<essl_lib.*>: package(menhirLib)

true: use_menhir
